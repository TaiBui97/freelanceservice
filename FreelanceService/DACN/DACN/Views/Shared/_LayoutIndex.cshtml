<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="author" content="Chợ kĩ năng">
    <title>Chợ kĩ năng</title>
    <link rel="stylesheet" href="~/assets/fonts/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="~/assets/fonts/themify-icons.css">

    @Styles.Render("~/bundles/core");
</head>
<body>
        <section id="intro" class="section-intro" style="background-image: url('../../assets/img/bg/bg-intro-1.jpg');">
            @RenderPage("~/Views/Shared/Header.cshtml")

            <div class="search-container">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                            <h1>Tìm kiếm dịch vụ phù hợp với bạn</h1><br><h2>Có hơn <strong>12,000</strong> dịch vụ và hàng ngàn việc làm dành cho bạn!</h2>
                            <div class="content">
                                <form action="/Home/SearchDrop">
                                    <div class="row">
                                        <div class="col-md-4 col-sm-6">
                                            <div class="form-group">
                                                <input class="form-control" type="text" name="search" placeholder="job title / keywords ">
                                                <i class="ti-time"></i>
                                            </div>
                                        </div>
                                        @*<div class="col-md-4 col-sm-6">
                                                <div class="form-group">
                                                    <input class="form-control" type="email" placeholder="city / province / zip code">
                                                    <i class="ti-location-pin"></i>
                                                </div>
                                            </div>*@
                                        <div class="col-md-6 col-sm-6">
                                            <div class="search-category-container">
                                                <label class="styled-select">
                                                    @Html.Action("NavigationDrop", "Home")
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-1 col-sm-6">
                                            <button type="submit" class="btn btn-search-icon"><i class="ti-search"></i></button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="popular-jobs">
                                <b>Từ khóa phổ biến</b>
                                <a href="#">Web Design</a>
                                <a href="#">Manager</a>
                                <a href="#">Programming</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        @RenderBody()
        @RenderPage("~/Views/Shared/Footer.cshtml")

    @Scripts.Render("~/bundles/js")
    <script>
        $(document).ready(function () {
            $('.selectpicker').selectpicker({
                liveSearch: true,
                showSubtext: true
            });
        });

    </script>

    <script src="~/Scripts/jquery.signalR-2.4.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script type="text/javascript">
        $(function () {
            // Reference the auto-generated proxy for the hub.
            console.log("aaa");
            $.connection.hub.qs = { 'uid': '@Html.Raw(Session["mataikhoan"])' };
            var chat = $.connection.chatHub;

            // Create a function that the hub can call back to display messages.
            chat.client.addChatMessage = function (who, message) {

                var expression = /[-a-zA-Z0-9@@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@@:%_\+.~#?&//=]*)?/gi;
                var regex = new RegExp(expression);
                if (message.match(regex)) {
                    console.log('is link');
                    $('#discussion').append('<li><strong>' + htmlEncode(who) + '</strong>: ' + '<a href=' + message + '>'
                        + htmlEncode(message) + '</a> ' + '</li>');
                } else {
                    $('#discussion').append('<li><strong>' + htmlEncode(who)
                        + '</strong>: ' + htmlEncode(message) + '</li>');
                }

                //console.log(document.querySelector("#noti").innerHTML = "tin nhan");
            }
        });


        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
    <script>
        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        /*An array containing all the country names in the world:*/
        var countries = ["An Giang", "Bà Rịa - Vũng Tàu", "Bắc Giang", "Bắc Kạn", "Bạc Liêu", " Bắc Ninh", " Bến Tre", "Bình Định", " Bình Dương", " Bình Phước", " Bình Thuận", " Cà Mau", " Cao Bằng", " Đắk Lắk", " Đắk Nông", " Điện Biên", "Đồng Nai", " Đồng Tháp", " Gia Lai", " Hà Giang", "Cần Thơ", "Đà Nẵng", "Hải Phòng ", "Hà Nội", "Hồ Chí Minh"];

        /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
        autocomplete(document.getElementById("myInput"), countries);
    </script>
</body>
</html>
